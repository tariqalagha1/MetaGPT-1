PolynomialExpansion:
  type: class
  description: "Add polynomial and interaction features from selected numeric columns, excluding the bias column."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          cols:
            type: list
            description: "Columns for polynomial expansion."
          degree:
            type: int
            description: "The degree of the polynomial features."
            default: 2
        required:
          - cols
    fit:
      description: "Fit the PolynomialExpansion model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

CatCount:
  type: class
  description: "Add value counts of categorical columns as new features."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          cols:
            type: list
            description: "Columns for value counts."
        required:
          - cols
    fit:
      description: "Fit the CatCount model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

TargetMeanEncoder:
  type: class
  description: "Encodes a categorical column by the mean of the label column, and adds the result as a new feature."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          col:
            type: str
            description: "Column to be mean encoded."
          label:
            type: str
            description: "Predicted label column."
        required:
          - col
          - label
    fit:
      description: "Fit the TargetMeanEncoder model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

KFoldTargetMeanEncoder:
  type: class
  description: "Adds a new feature to the DataFrame by k-fold mean encoding of a categorical column using the label column."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          col:
            type: str
            description: "Column to be k-fold mean encoded."
          label:
            type: str
            description: "Predicted label column."
          n_splits:
            type: int
            description: "Number of splits for K-fold."
            default: 5
          random_state:
            type: int
            description: "Random seed."
            default: 2021
        required:
          - col
          - label
    fit:
      description: "Fit the KFoldTargetMeanEncoder model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

CatCross:
  type: class
  description: "Add pairwise crossed features and convert them to numerical features."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          cols:
            type: list
            description: "Columns to be pairwise crossed."
          max_cat_num:
            type: int
            description: "Maximum unique categories per crossed feature."
            default: 100
      required:
        - cols
    fit:
      description: "Fit the CatCross model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

GroupStat:
  type: class
  description: "Aggregate specified column in a DataFrame grouped by another column, adding new features named '<agg_col>_<agg_func>_by_<group_col>'."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          group_col:
            type: str
            description: "Column used for grouping."
          agg_col:
            type: str
            description: "Column on which aggregation is performed."
          agg_funcs:
            type: list
            description: >-
              List of aggregation functions to apply, such as ['mean', 'std'].
              Each function must be supported by pandas.
        required:
          - group_col
          - agg_col
          - agg_funcs
    fit:
      description: "Fit the GroupStat model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

SplitBins:
  type: class
  description: "Inplace binning of continuous data into intervals, returning integer-encoded bin identifiers directly."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          cols:
            type: list
            description: "Columns to be binned inplace."
          strategy:
            type: str
            description: "Strategy used to define the widths of the bins."
            default: quantile
            enum:
              - quantile
              - uniform
              - kmeans
        required:
          - cols
    fit:
      description: "Fit the SplitBins model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."

GeneralSelection:
  type: class
  description: "Drop all nan feats and feats with only one unique value."
  methods:
    __init__:
      description: "Initialize self."
      parameters:
        properties:
          label_col:
            type: str
            description: "Label column name."
        required:
          - label_col
    fit:
      description: "Fit the GeneralSelection model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
    transform:
      description: "Transform the input DataFrame with the fitted model."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."
    fit_transform:
      description: "Fit and transform the input DataFrame."
      parameters:
        properties:
          df:
            type: DataFrame
            description: "The input DataFrame."
        required:
          - df
      returns:
        df:
          type: DataFrame
          description: "The transformed DataFrame."